---
title: 'Next.js'
description: 'Upload files from your Next.js App'
order: 3
prefix: 'guide'
name: 'Next.js'
---

## {title}
{description}

### Install the Javascript SDK
```bash
npm install @uploadfast/client
```

### Server-Side Upload Handler
Create an API route handler to process file uploads securely:

```typescript
import { createClient } from '@uploadfast/client'
import { NextRequest, NextResponse } from 'next/server'

// Initialize the UploadFast client
const fast = createClient({ 
  apiKey: process.env.UPLOADFAST_API_KEY 
})

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData()
    const files = formData.getAll('file') as File[]

    if (!files.length) {
      return NextResponse.json(
        { error: 'You must provide a file to upload' },
        { status: 400 }
      )
    }

    // Upload files using the SDK
    const fileData = await fast.upload(files)

    // Return the upload results
    return NextResponse.json(fileData)
  } catch (error) {
    console.error('Upload error:', error)
    return NextResponse.json(
      { error: 'An error occurred while uploading the file' },
      { status: 500 }
    )
  }
}
```

### Client-Side Upload Component
Here's an example React component using the modern App Router conventions:

```typescript
'use client'

import { useState } from 'react'

export default function UploadPage() {
  const [files, setFiles] = useState<FileList | null>(null)
  const [uploading, setUploading] = useState(false)
  const [uploadedFiles, setUploadedFiles] = useState<Array<{
    url: string
    file_name: string
  }>>([])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!files?.length) return

    setUploading(true)
    try {
      const formData = new FormData()
      Array.from(files).forEach(file => {
        formData.append('file', file)
      })

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        throw new Error('Upload failed')
      }

      const data = await response.json()
      setUploadedFiles(data)
    } catch (error) {
      console.error('Upload error:', error)
    } finally {
      setUploading(false)
    }
  }

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Upload Files</h1>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="file"
          multiple
          onChange={(e) => setFiles(e.target.files)}
          className="block w-full"
          disabled={uploading}
        />
        
        <button
          type="submit"
          disabled={!files?.length || uploading}
          className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
        >
          {uploading ? 'Uploading...' : 'Upload'}
        </button>
      </form>

      {uploadedFiles.length > 0 && (
        <div className="mt-8">
          <h2 className="text-xl font-semibold mb-2">Uploaded Files:</h2>
          <ul className="space-y-2">
            {uploadedFiles.map((file, index) => (
              <li key={index} className="p-2 bg-gray-50 rounded">
                <p>Filename: {file.file_name}</p>
                <a 
                  href={file.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-500 hover:underline"
                >
                  View File
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )
}
```

### Environment Setup
Create a  *.env.local*  file in your project root:

```bash
UPLOADFAST_API_KEY=your_api_key_here
```

Make sure to add your API key to your deployment environment variables as well.
